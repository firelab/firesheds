CMAKE_MINIMUM_REQUIRED(VERSION 3.1)

PROJECT(firesheds)

SET(CMAKE_CXX_STANDARD 11)

FIND_PACKAGE(GDAL REQUIRED)

INCLUDE(FindOpenMP)
FIND_PACKAGE(OpenMP)
IF(OPENMP_FOUND)
    IF(MSVC)
        SET(CMAKE_CXX_FLAGS "${cmake_cxx_flags} ${OpenMP_CXX_FLAGS} /EHsc")
    ELSE(MSVC) # Not using MSVC
        SET(CMAKE_CXX_FLAGS "${cmake_cxx_flags} ${OpenMP_CXX_FLAGS}")
    ENDIF(MSVC)
ELSE(OPENMP_FOUND)
    MESSAGE("OpenMP could not be found on your system, disabling support")
ENDIF(OPENMP_FOUND)

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/src
					${GDAL_INCLUDE_DIRS})

IF(SQLITE3_INCLUDE_DIR AND SQLITE3_LIBRARY_RELEASE AND SQLITE3_LIBRARY_DEBUG)
    SET(SQLITE3_FIND_QUIETLY TRUE)
ENDIF(SQLITE3_INCLUDE_DIR AND SQLITE3_LIBRARY_RELEASE AND SQLITE3_LIBRARY_DEBUG)

FIND_PATH(SQLITE3_INCLUDE_DIR sqlite3.h)

FIND_LIBRARY(SQLITE3_LIBRARY_RELEASE NAMES sqlite3)

FIND_LIBRARY(SQLITE3_LIBRARY_DEBUG NAMES sqlite3 sqlite3d HINTS /usr/lib/debug/usr/lib/ C:/Windows/System32/)

IF(SQLITE3_LIBRARY_RELEASE OR SQLITE3_LIBRARY_DEBUG AND SQLITE3_INCLUDE_DIR)
	SET(SQLITE3_FOUND TRUE)
ENDIF(SQLITE3_LIBRARY_RELEASE OR SQLITE3_LIBRARY_DEBUG AND SQLITE3_INCLUDE_DIR)

IF(SQLITE3_LIBRARY_DEBUG AND SQLITE3_LIBRARY_RELEASE)
	# if the generator supports configuration types then set
	# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value
	IF(CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
		SET(SQLITE3_LIBRARIES optimized ${SQLITE3_LIBRARY_RELEASE} debug ${SQLITE3_LIBRARY_DEBUG})
		ELSE(CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
			# if there are no configuration types and CMAKE_BUILD_TYPE has no value
			# then just use the release libraries
			SET(SQLITE3_LIBRARIES ${SQLITE3_LIBRARY_RELEASE})
	ENDIF(CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
	ELSEIF(SQLITE3_LIBRARY_RELEASE)
		SET(SQLITE3_LIBRARIES ${SQLITE3_LIBRARY_RELEASE})
	ELSE(SQLITE3_LIBRARY_DEBUG AND SQLITE3_LIBRARY_RELEASE)
		SET(SQLITE3_LIBRARIES ${SQLITE3_LIBRARY_DEBUG})
ENDIF(SQLITE3_LIBRARY_DEBUG AND SQLITE3_LIBRARY_RELEASE)

IF(SQLITE3_FOUND)
	IF(NOT SQLITE3_FIND_QUIETLY)
		MESSAGE(STATUS "Found Sqlite3 header file in ${SQLITE3_INCLUDE_DIR}")
		MESSAGE(STATUS "Found Sqlite3 libraries: ${SQLITE3_LIBRARIES}")
	ENDIF(NOT SQLITE3_FIND_QUIETLY)
	ELSE(SQLITE3_FOUND)
	IF(SQLITE3_FIND_REQUIRED)
		MESSAGE(FATAL_ERROR "Could not find Sqlite3")
	ELSE(SQLITE3_FIND_REQUIRED)
		MESSAGE(STATUS "Optional package Sqlite3 was not found")
	ENDIF(SQLITE3_FIND_REQUIRED)
ENDIF(SQLITE3_FOUND)

#Find FileGDB_API ESRI Geodatabase Library 
FIND_PATH(FILEGDB_API_INCLUDE_DIR FileGDBAPI.h)
IF(WIN32)
    SET(FILEGDB_API_DIR "FILEGDB_API-NOTFOUND" CACHE PATH "Location of FILEGDB_API")
	# Clear out variables derived from FILEGDB_API_DIR
    UNSET(FILEGDB_API_INCLUDE_DIR CACHE)
	UNSET(FILEGDB_API_LIBRARY CACHE)
    SET(FILEGDB_API_INCLUDE_DIR "${FILEGDB_API_DIR}/include")
	
	IF(DEFINED CMAKE_BUILD_TYPE)
		IF(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
			FIND_LIBRARY(FILEGDB_API_LIBRARY FileGDBAPID HINTS "${FILEGDB_API_DIR}/lib64")
		ENDIF()
		IF(${CMAKE_BUILD_TYPE} STREQUAL "Release")
			FIND_LIBRARY(FILEGDB_API_LIBRARY FileGDBAPI HINTS "${FILEGDB_API_DIR}/lib64")
		ENDIF()
	ENDIF()
	IF(NOT(DEFINED CMAKE_BUILD_TYPE))
		SET(CMAKE_BUILD_TYPE NotSet CACHE STRING "Build Type")
	ENDIF()
ELSE(WIN32) # Linux
	FIND_LIBRARY(FILEGDB_API_LIBRARY FileGDBAPI)
ENDIF(WIN32)
INCLUDE_DIRECTORIES(${FILEGDB_API_INCLUDE_DIR})

ADD_EXECUTABLE(${PROJECT_NAME} 
				"src/main.cpp"
				"src/MyPolygon.cpp"
				"src/WfipsGrid.cpp"
				"src/WfipsGridData.cpp")

TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${FILEGDB_API_LIBRARY})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${GDAL_LIBRARY})
TARGET_LINK_LIBRARIES (${PROJECT_NAME} ${SQLITE3_LIBRARIES})
